### Solucion 4.1

Explica cada uno de los resultados y sus diferencias.

En el codigo *f1.c* al compilar y luego ejecutar nos da como resultado 848.512390 nano-segundos, el cual es un promedio de todos los tiempos medidos en el codigo, lo que hace el codigo basicamente es hacer una iteracion de 1000000 de veces y luego dentro de esa iteracion se va midiendo el tiempo en que se tarda el comando **write** luego una vez medido el tiempo, se va sumando cada tiempo medido en una variable de acumulacion la cual es *sum*, luego una vez que termina toda la iteracion se tiene todos los tiempos totales sumados en la variable *sum* y finalmente se divide entre el numeor de iteraciones para que obtener el promedio de tiempoque hace la funcion *write*, la cual se muestra por consola.

En el codigo *f2.c* al compilar y luego ejecutar nos da como resultado 5 resultados las cuales son el promedio de tiempo medido dadas por el primer for que va desde 100 hasta 1000000 y va recorriendo multiplicandose por 10, en total el primer for hace 5 iteraciones, luego se comienza a medir el tiempo a traves del comando **clock_gettime()** donde mide el tiempo del comando read durante toda la iteracion del segundo for que va desde cero hasta el indice de iteracion menos 1 del primer for, luego de terminar esa iteracion, termina de medir el tiempo y lo guarda en la variable **tiempo_total**, finalmente imprimos por consola el tiempo real y promedio de cada iteracion del primer for.

En el codigo *f3.c* al compilar y luego ejecutar nos da como resultado la medicion de dos tiempos, el primero es medido a la llamada del sistema que tiene como parametro a **int fd** y comando read, este comando comando ultimo es sometido a 1000000 de iteraciones, despues de terminar esta iteracion se imprime por consola el tiempo promedio medido de la llamada al sistema , luego se declaran variables de cambio de contexto y luego se crea un nuevo proceso y dos tuberias en la cual se mide el tiempo de cambio de contexto en el proceso padre con una iteracion de 1000000 donde hace operacion de lectura y escritura a traves de los comandos *read* y *write*, una vez terminado imprime por consola el tiempo promedio medido y termina la ejecucion del programa.
 
