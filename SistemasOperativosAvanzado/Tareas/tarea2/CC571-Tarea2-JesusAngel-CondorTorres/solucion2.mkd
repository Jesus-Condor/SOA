###Solucion 2

En la pregunta 2 se nos pide llamar a la funcion *open()*, la cual pertenece a la libreria **fctnl.h**, ademas utlizamos otras librerias como **stdio.h**, **stdlib.h**, **unistd.h** y **sys/types.h**, en los cuales cada una de las librerias mecionadas cumplen un papel fundamental como por ejemplo, stdio.h ayuda con las funciones *printf* (salida por consola), stdlib.h nos ayuda en la culminacion del programa, unistd.h y sys/types nos ayuda con los procesos con las funciones de *fork()* y *pid_t*, finalmente como ya se menciono la libreria fcntl.h ayuda con la funcion *open()*, la cual nos ayuda a leer o escribir un archivo con los comandos *O_RDONLY* y *O_WRONLY* respectivamente.

El codigo sigue el siguiente orden, primero declaramos 4 variables enteras las cuales son *i*, *j*, *arch* y *date*, las dos primeras serviran como contadores para bucles, date sera usado como un area de memoria donde se leeran los datos y por ultimos arch devuelve un descriptor entero de lo que lee los parametros de la funcion *open()*, despues declaramos la variable pid del tipo pid_t que sirve para representar la identificacion de los procesos a traves de un tipo entero; luego de la declaraciones de variables creamos un nuevo proceso con la funcion fork() en la variable pid, luego a traves de una condicional de que si pid es distinto de cero, entonces vemos el funcionamiento del proceso padre verificando a traves del bucle *while* que no sea un proceso fallido, para luego mostrar por consola el id del proceso y si en caso la condicional no cumpliera pasaria los mismos pasos dicho anteriormente pero en el proceso hijo, finalmente cerramos la data extraida con la funcion close y finalizamos el codigo con un retorno del valor cero a la funcion main. 
